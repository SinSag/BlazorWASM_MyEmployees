@using MyEmployees.Client.Services
@using MyEmployees.Server.Models

@inject IEmployeeService EmployeeService

@if(employees == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-warning m-3" role="status">
            <span class="visually-hidden hidden">Loading...</span>
        </div>
        <h3 class="mt-3">Fetching list of employees...</h3>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover">
            <thead class="table-dark align-middle">
                <tr>
                    <td>#</td>
                    <td>First name</td>
                    <td>Last name</td>
                    <td>Job role</td>
                    <td>Department</td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
            @foreach(var employee in employees)
            {
                <tr @onclick="() => SelectEmployee(employee)">
                    <td>@employee.id</td>
                    <td>@employee.firstname</td>
                    <td>@employee.lastname</td>
                    <td>@employee.jobrole</td>
                    <td>@employee.department</td>
                    <td>
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
                <tr>
                    <td>#</td>
                    <td><input /></td>
                    <td><input /></td>
                    <td><input /></td>
                    <td><input /></td>
                    <td>
                        <button type="submit" class="btn btn-success">Add</button>
                    </td>
                </tr>
            </tbody>
            
        </table>
    </div>
}

@code{
    [Parameter]
    public EventCallback<Employee> OnEmployeeSelected { get; set; }

    List<Employee> employees = new List<Employee>();

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployees();
    }

    protected async Task SelectEmployee(Employee employee)
    {
        await OnEmployeeSelected.InvokeAsync(employee);
    }
}